name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: mohamedhaki/guardmed-backend
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_AUTH_CERT_URL: ${{ secrets.FIREBASE_AUTH_CERT_URL }}
          FIREBASE_CLIENT_CERT_URL: ${{ secrets.FIREBASE_CLIENT_CERT_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: mohamedhaki
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: mohamedhaki/guardmed-backend:latest
          build-args: |
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
            FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}
            FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
            FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}
            FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }}
            FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }}
            FIREBASE_AUTH_CERT_URL=${{ secrets.FIREBASE_AUTH_CERT_URL }}
            FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }}
            FIRESTORE_DATABASE_URL=${{ secrets.FIRESTORE_DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            MAIL_HOST=${{ secrets.MAIL_HOST }}
            MAIL_PORT=${{ secrets.MAIL_PORT }}
            MAIL_USER=${{ secrets.MAIL_USER }}
            MAIL_PASS=${{ secrets.MAIL_PASS }}
            MAIL_FROM=${{ secrets.MAIL_FROM }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull la dernière image
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Arrêter et supprimer l'ancien conteneur s'il existe
            docker stop guardmed-api || true
            docker rm guardmed-api || true
            
            # Lancer le nouveau conteneur avec les variables d'environnement
            docker run -d \
              --name guardmed-api \
              -p 3000:3000 \
              -e FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
              -e FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }} \
              -e FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} \
              -e FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \
              -e FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }} \
              -e FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }} \
              -e FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }} \
              -e FIREBASE_AUTH_CERT_URL=${{ secrets.FIREBASE_AUTH_CERT_URL }} \
              -e FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e MAIL_HOST=${{ secrets.MAIL_HOST }} \
              -e MAIL_PORT=${{ secrets.MAIL_PORT }} \
              -e MAIL_USER=${{ secrets.MAIL_USER }} \
              -e MAIL_PASS=${{ secrets.MAIL_PASS }} \
              -e MAIL_FROM=${{ secrets.MAIL_FROM }} \
              --restart unless-stopped \
              ${{ env.DOCKER_IMAGE }}:latest
            
            # Vérifier que le conteneur est bien lancé
            docker ps | grep guardmed-api
            
            # Attendre que l'application démarre
            sleep 10
            
            # Vérifier que l'application répond
            curl -f http://localhost:3000/api || echo "Application not responding on port 3000" 